import java.awt.EventQueue;

import java.sql.*;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JComboBox;
import javax.swing.JTextPane;
import javax.swing.*;
import java.awt.Color;
import java.awt.event.ItemListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Officer extends JFrame {

	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Officer frame = new Officer();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 * @throws Exception 
	 */
	public Officer() throws Exception {
		Connection conn = DbConnection.database();
		
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 420, 358);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
	
		
		JTextPane txtDetails = new JTextPane();
		txtDetails.setFont(new Font("Arial", Font.BOLD, 20));
		txtDetails.setBounds(53, 43, 261, 187);
		contentPane.add(txtDetails);
		txtDetails.setEditable(false);
		
		
		JButton btnApprove = new JButton("Approve");
		
		btnApprove.setBackground(new Color(60, 179, 113));
		btnApprove.setBounds(80, 241, 89, 23);
		contentPane.add(btnApprove);
		
		JButton btnReject = new JButton("Reject");
		
		btnReject.setBackground(new Color(204, 51, 51));
		btnReject.setBounds(212, 241, 89, 23);
		contentPane.add(btnReject);
		JComboBox comboTicket = new JComboBox();
	
		
		comboTicket.setBounds(53, 21, 261, 22);
		contentPane.add(comboTicket);
		
		JButton btnBack = new JButton("Back");
		btnBack.addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				dispose();
				visitor vs = null;
				try {
					vs = new visitor();
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				vs.setVisible(true);
			}
		});
		btnBack.setBounds(305, 285, 89, 23);
		contentPane.add(btnBack);
		
		JLabel lblID = new JLabel("Ticket ID:");
		lblID.setBounds(0, 25, 72, 14);
		contentPane.add(lblID);
		Statement stm= conn.createStatement();
		ResultSet rs = stm.executeQuery("select ticketid from user_request where status is NULL");
		while(rs.next()) {
			String id = rs.getString("ticketid");
			comboTicket.addItem("Ticket ID: "+id);
		}
		if(comboTicket.getItemCount()==0) {
			comboTicket.setModel(new DefaultComboBoxModel(new String[] {"No New Ticket"}));
			btnApprove.setEnabled(false);
			btnReject.setEnabled(false);
		}
		
		comboTicket.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				if(comboTicket.getItemCount()<1) {
					try {
						
						PreparedStatement statement = conn.prepareStatement("select name,ic,phone,purpose,tov,dov from user_request where ticketid = ?");
						statement.setString(1, comboTicket.getSelectedItem().toString());
						comboTicket.setSelectedIndex(0);
						ResultSet  rs = statement.executeQuery();
						
						
						String details = "";
						while(rs.next()) {
							String name = rs.getString("name");
							String ic = rs.getString("ic");
							String phone = rs.getString("phone");
							String purpose = rs.getString("purpose");
							String tov = rs.getString("tov");
							String dov = rs.getString("dov");
							 details = name +"\n" +ic +"\n" +phone +"\n" +purpose +"\n" +tov +"\n" +dov +"\n" ;
						}
						
						txtDetails.setText(details);
					}
					catch (Exception e1) {
					// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				if (comboTicket.getItemCount()>2&&comboTicket.getSelectedItem()!=null) {
					try {
					
					PreparedStatement statement = conn.prepareStatement("select name,ic,phone,purpose,tov,dov from user_request where ticketid = ?");
					statement.setString(1, comboTicket.getSelectedItem().toString());  
					ResultSet  rs = statement.executeQuery();
					
					
					String details = "";
					while(rs.next()) {
						String name = rs.getString("name");
						String ic = rs.getString("ic");
						String phone = rs.getString("phone");
						String purpose = rs.getString("purpose");
						String tov = rs.getString("tov");
						String dov = rs.getString("dov");
						 details = name +"\n" +ic +"\n" +phone +"\n" +purpose +"\n" +tov +"\n" +dov +"\n" ;
					}
					
					txtDetails.setText(details);
				}
				catch (Exception e1) {
				// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				}
				}
				
			}
		});
		btnApprove.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
					String approve = "Approved";
				try {
					PreparedStatement statement = conn.prepareStatement("update user_request set status = ? where ticketid = ?");
					statement.setString(1, approve);
					statement.setInt(2, Integer.parseInt(comboTicket.getSelectedItem().toString()));
					statement.execute();
					Statement stm= conn.createStatement();
					ResultSet rs = stm.executeQuery("select ticketid from user_request where status is NULL");
					comboTicket.removeItem(comboTicket.getSelectedItem().toString());
					comboTicket.removeAllItems();
					while(rs.next()) {
						String id = rs.getString("ticketid");
						comboTicket.addItem(id);
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			}
		});
		btnReject.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String reject= "Rejected";
				String reason =JOptionPane.showInputDialog(null,"Reason for reject") ;
				if(reason=="0") {
				try {
					PreparedStatement statement = conn.prepareStatement("update user_request set status = ? ,reason = ? where ticketid = ?");
					statement.setString(1, reject);
					statement.setString(2, reason);
					statement.setInt(3, Integer.parseInt(comboTicket.getSelectedItem().toString()));
					statement.execute();
					
					Statement stm= conn.createStatement();
					ResultSet rs = stm.executeQuery("select ticketid from user_request where status is NULL");
					comboTicket.removeItem(comboTicket.getSelectedItem().toString());
					comboTicket.removeAllItems();
					while(rs.next()) {
						String id = rs.getString("ticketid");
						comboTicket.addItem(id);
					}
					
					
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			}
		});
	}
}
